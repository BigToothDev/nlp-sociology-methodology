[{"name": "app.py", "content": "from shiny import App, Inputs, Outputs, Session, reactive, render, ui\nfrom pathlib import Path\nimport pandas as pd\nimport json\nimport urllib.request\n\ndef load_json_from_url(url):\n    try:\n        with urllib.request.urlopen(url) as response:\n            return json.loads(response.read().decode('utf-8-sig'))\n    except Exception as e:\n        print(f\"Error loading data from {url}: {e}\")\n        return []\n\nds_url = \"https://raw.githubusercontent.com/BigToothDev/nlp-sociology-methodology/refs/heads/main/data/dataset.json\"\nds_diff_url = \"https://raw.githubusercontent.com/BigToothDev/nlp-sociology-methodology/refs/heads/main/data/wdiff_dataset.json\"\n\nds = load_json_from_url(ds_url)\nds_diff = load_json_from_url(ds_diff_url)\n\nappdir = Path(__file__).parent.parent if \"__file__\" in globals() else Path.cwd()\n\napp_ui = ui.page_fluid(\n    ui.tags.link(href=\"styles.css\", rel=\"stylesheet\"),\n    ui.panel_title(\"DataExplorer\"),\n    ui.layout_sidebar(\n        ui.sidebar(\n            ui.div(\n                ui.h6(\"Num of articles:\"),\n                ui.output_text(\"num_articles\"),\n                ui.br(),\n                ui.input_switch(\"data_toggle\", \"Show only differing tone articles\", value=False),\n                ui.br(),\n                ui.input_selectize(\"article_id\", \"Select an article by ID:\", []),\n                ui.br(),\n                ui.input_text(\"keyword\", \"Search by keyword:\", \"\"),\n                ui.input_action_button(\"search_btn\", \"Find\", class_=\"search_btn\"),\n                ui.br(),\n                ui.br(),\n                ui.input_selectize(\"article_id_search\", \"Articles matching keyword:\", []),\n                ui.input_action_button(\"clear_btn\", \"Clear Selection\", class_=\"clear_btn\"),\n                class_=\"custom_side\"\n            )\n        ),\n        ui.div(\n            ui.h3(\"Article Title:\"),\n            ui.output_text_verbatim(\"headline\"),\n            ui.h4(\"Date:\"),\n            ui.output_text_verbatim(\"datetime\"),\n            ui.h4(\"URL:\"),\n            ui.output_text_verbatim(\"link\"),\n            ui.h4(\"LEMMA, General sentiment:\"),\n            ui.output_text_verbatim(\"lemma_general_sentiment\"),\n            ui.h4(\"LEMMA, Tone of the article:\"),\n            ui.output_text_verbatim(\"lemma_tone\"),\n            ui.h4(\"STEM, General sentiment:\"),\n            ui.output_text_verbatim(\"stem_general_sentiment\"),\n            ui.h4(\"STEM, Tone of the article:\"),\n            ui.output_text_verbatim(\"stem_tone\"),\n            class_=\"custom_content\"\n        )\n    )\n)\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.Calc\n    def current_df():\n        return pd.json_normalize(ds_diff if input.data_toggle() else ds)\n\n    @output()\n    @render.text\n    def num_articles():\n        return len(current_df())\n\n    @reactive.Calc\n    def select_article_by_id():\n        article_id = input.article_id_search() or input.article_id()\n        if article_id is None:\n            return None\n        filtered = current_df()[current_df()[\"id\"] == int(article_id)]\n        if not filtered.empty:\n            return filtered.iloc[0].to_dict()\n        return None\n\n    @output()\n    @render.text\n    def headline():\n        article = select_article_by_id()\n        if article:\n            return article.get('headline', \"No headline available\")\n        return \"No article selected\"\n\n    @output()\n    @render.text\n    def content():\n        article = select_article_by_id()\n        if article is not None:\n            return article.get('content', \"No content available\")\n        return \"No article selected\"\n\n    @output()\n    @render.text\n    def link():\n        article = select_article_by_id()\n        if article is not None:\n            return article.get('url', \"\")\n        return \"\"\n\n    @output()\n    @render.text\n    def datetime():\n        article = select_article_by_id()\n        if article is not None:\n            return article.get('time', \"\")\n        return \"\"\n\n    @output()\n    @render.text\n    def lemma_tone():\n        article = select_article_by_id()\n        if article is not None:\n            return f\"Negative tone: {article.get('lemma_neg_tone', 'N/A')} | Neutral tone: {article.get('lemma_neu_tone', 'N/A')} | Positive tone: {article.get('lemma_pos_tone', 'N/A')} | Compound tone: {article.get('lemma_compound_tone', 'N/A')}\"\n        return \"\"\n\n    @output()\n    @render.text\n    def stem_tone():\n        article = select_article_by_id()\n        if article is not None:\n            return f\"Negative tone: {article.get('stem_neg_tone', 'N/A')} | Neutral tone: {article.get('stem_neu_tone', 'N/A')} | Positive tone: {article.get('stem_pos_tone', 'N/A')} | Compound tone: {article.get('stem_compound_tone', 'N/A')}\"\n        return \"\"\n\n    @output()\n    @render.text\n    def lemma_general_sentiment():\n        article = select_article_by_id()\n        if article is not None:\n            compound_tone = article.get('lemma_compound_tone', 0)\n            try:\n                compound_tone = float(compound_tone)\n                if compound_tone >= 0.05:\n                    return \"Positive\"\n                elif compound_tone <= -0.05:\n                    return \"Negative\"\n                else:\n                    return \"Neutral\"\n            except (ValueError, TypeError):\n                return \"Unknown\"\n        return \"\"\n\n    @output()\n    @render.text\n    def stem_general_sentiment():\n        article = select_article_by_id()\n        if article is not None:\n            compound_tone = article.get('stem_compound_tone', 0)\n            try:\n                compound_tone = float(compound_tone)\n                if compound_tone >= 0.05:\n                    return \"Positive\"\n                elif compound_tone <= -0.05:\n                    return \"Negative\"\n                else:\n                    return \"Neutral\"\n            except (ValueError, TypeError):\n                return \"Unknown\"\n        return \"\"\n\n    @reactive.effect\n    @reactive.event(input.search_btn)\n    def search_kw():\n        keyword = input.keyword()\n        if keyword:\n            filtered_data = current_df()[current_df()['headline_lemma'].str.contains(keyword, case=False, na=False)]\n            ui.update_selectize(\n                session=session,\n                id=\"article_id_search\",\n                choices=[str(id) for id in filtered_data['id']] if not filtered_data.empty else [],\n            )\n            ui.update_selectize(\n                session=session,\n                id=\"article_id\",\n                choices=[]\n            )\n\n    @reactive.effect\n    def clear_selectize():\n        if input.clear_btn():\n            ui.update_selectize(\n                session=session,\n                id=\"article_id_search\",\n                choices=[]\n            )\n            ui.update_selectize(\n                session=session,\n                id=\"article_id\",\n                choices=[str(id) for id in current_df()[\"id\"]]\n            )\n            ui.update_text(\n                session=session,\n                id=\"keyword\",\n                value=\"\"\n            )\n\n    @reactive.effect\n    def update_on_toggle():\n        ui.update_selectize(\n            session=session,\n            id=\"article_id\",\n            choices=[str(id) for id in current_df()[\"id\"]]\n        )\n        ui.update_selectize(\n            session=session,\n            id=\"article_id_search\",\n            choices=[]\n        )\n\napp = App(app_ui, server)\n", "type": "text"}, {"name": "styles.css", "content": "body {\n    color: #ffffff;\n    background-color: #2b3137;\n    text-align: justify;\n}\n.page-fluid {\n    background-color: black;\n}\n.custom_content {\n    color: #ffffff;\n    background-color: #2b3137;\n}\n.custom_side{\n    color: #fafbfc;\n}\npre {\n    color:#fafbfc;\n    background-color: #24292e;\n}\n#keyword {\n    background-color: #24292e;\n    color: white;\n    border: 2px solid #fafbfc;\n    border-radius: 5px;\n}\n\n.selectize-input {\n    color: #ffffff;\n    border: 2px solid #fafbfc;\n    border-radius: 5px;\n    padding: 8px;\n    font-weight: bold;\n}\n.selectize-input:hover {\n    border-color: #24292e;\n}\n.selectize-dropdown {\n    color: #ffffff;\n    background-color: #24292e;\n    border: 1px solid #24292e;\n    border-radius: 5px;\n    padding: 5px;\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\n}\n.selectize-dropdown .option:hover {\n    background-color: #2b3137;\n    color: white;\n}\n.selectize-input.items {\n    background-color: #24292e !important; \n}\n\n.search_btn {\n    background-color: #007bff;\n    color: white;\n    font-size: 16px;\n    padding: 10px 20px;\n    border: none;      \n    border-radius: 8px;\n    cursor: pointer;\n    box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);\n    transition: all 0.3s ease;\n}\n\n.search_btn:hover {\n    background-color: #0056b3;\n    transform: scale(1.05);\n}\n\n.clear_btn {\n    background-color: #2dba4e;\n    color: white;\n    font-size: 16px;\n    padding: 10px 20px;\n    border: none;\n    border-radius: 8px;\n    cursor: pointer;\n    box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);\n    transition: all 0.3s ease;\n}\n\n.clear_btn:hover {\n    background-color: #25933e;\n    transform: scale(1.05);\n}\n.switch {\n    color: #25933e;\n    background-color: aqua;\n    position: relative;\n    display: inline-block;\n    width: 60px;\n    height: 34px;\n  }", "type": "text"}]